/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_starting_screen_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/starting-screen.js */ \"./src/scripts/starting-screen.js\");\n/* harmony import */ var _scripts_game_settings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/game-settings.js */ \"./src/scripts/game-settings.js\");\n\r\n\r\n\r\n_scripts_starting_screen_js__WEBPACK_IMPORTED_MODULE_0__.startBtn.addEventListener(\"click\", _scripts_starting_screen_js__WEBPACK_IMPORTED_MODULE_0__.startGame);\r\n\r\n_scripts_game_settings_js__WEBPACK_IMPORTED_MODULE_1__.form.addEventListener(\"submit\", _scripts_game_settings_js__WEBPACK_IMPORTED_MODULE_1__.handleFormSubmit);\r\n\r\n(0,_scripts_game_settings_js__WEBPACK_IMPORTED_MODULE_1__.addDifficultyBtnsEvtListener)();\r\n(0,_scripts_game_settings_js__WEBPACK_IMPORTED_MODULE_1__.disableDecreaseBtn)();\r\n\r\n_scripts_game_settings_js__WEBPACK_IMPORTED_MODULE_1__.numQuestionsInput.addEventListener(\"input\", _scripts_game_settings_js__WEBPACK_IMPORTED_MODULE_1__.checkInputtedNumQues);\r\n\r\n(0,_scripts_game_settings_js__WEBPACK_IMPORTED_MODULE_1__.addNumQuestionsEvtListener)();\r\n\r\n(0,_scripts_game_settings_js__WEBPACK_IMPORTED_MODULE_1__.addDiffCategoryEvent)();\r\n\n\n//# sourceURL=webpack://trivia-quiz/./src/index.js?");

/***/ }),

/***/ "./src/scripts/game-results.js":
/*!*************************************!*\
  !*** ./src/scripts/game-results.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   showGameResults: () => (/* binding */ showGameResults)\n/* harmony export */ });\n/* harmony import */ var _quiz_game_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./quiz-game.js */ \"./src/scripts/quiz-game.js\");\n\r\n\r\nconst gameSettingsBtn = document.querySelector(\".results-game-sett\");\r\n\r\nconst quizContainer = document.querySelector(\".quiz-container\");\r\nconst tryAgainBtn = document.querySelector(\".results-try\");\r\nconst resultData = [\r\n  {\r\n    percent: 100,\r\n    animationURL:\r\n      \"https://lottie.host/08d62682-bb79-4a74-9af2-0c08e0377014/LuqT0MHFWZ.lottie\",\r\n    resultMessage: \"Perfect! You nailed it!\",\r\n  },\r\n  {\r\n    percent: [80, 99],\r\n    animationURL:\r\n      \"https://lottie.host/ec521fe6-a670-430f-b353-ef7dd1497234/VJDxw8T9zC.lottie\",\r\n    resultMessage: \"Great job! Almost perfect.\",\r\n  },\r\n  {\r\n    percent: [70, 79],\r\n    animationURL:\r\n      \"https://lottie.host/2362007e-69d7-4a9b-af97-1a8f1f08fb4e/u9Gn5iSJIk.lottie\",\r\n    resultMessage: \"Nice! You're getting there.\",\r\n  },\r\n  {\r\n    percent: [50, 69],\r\n    animationURL:\r\n      \"https://lottie.host/90441000-f0e8-4e4d-9aac-0b9355361fe7/AdhbHfcThW.lottie\",\r\n    resultMessage: \"Not bad. Keep going!\",\r\n  },\r\n  {\r\n    percent: [30, 49],\r\n    animationURL:\r\n      \"https://lottie.host/f3109c7a-32ab-4a63-b819-6adb196880a9/4grDEIOszk.lottie\",\r\n    resultMessage: \"Tough round. Try again!\",\r\n  },\r\n  {\r\n    percent: [0, 29],\r\n    animationURL:\r\n      \"https://lottie.host/839e8626-ce27-4d2a-aa28-936dd276ce91/A9t78Yn2mr.lottie\",\r\n    resultMessage: \"Donâ€™t give up! Practice makes perfect.\",\r\n  },\r\n];\r\n// Show result message\r\nconst showResultMessage = (score, totalQues) => {\r\n  const messageEl = document.querySelector(\".quiz-results-p1\");\r\n  const lottieEl = document.querySelector(\"#result-animation\");\r\n\r\n  const calulatedPercent = (score / totalQues) * 100;\r\n\r\n  const result = resultData.find((result) => {\r\n    if (typeof result.percent == \"number\") {\r\n      if (result.percent === calulatedPercent) {\r\n        return true;\r\n      }\r\n    } else {\r\n      const [percent1, percent2] = result.percent;\r\n      if (calulatedPercent >= percent1 && calulatedPercent <= percent2) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  messageEl.textContent = result.resultMessage;\r\n\r\n  lottieEl.load(result.animationURL);\r\n};\r\nconst showGameResults = (score, numberOfQues) => {\r\n  quizContainer.classList.add(\"show-results\");\r\n  quizContainer.classList.remove(\"show-quiz-content\");\r\n  const scoreInput = document.querySelector(\".results-num-corr\");\r\n  const quizQuestionsInput = document.querySelector(\".results-num-ques\");\r\n  scoreInput.textContent = score;\r\n  quizQuestionsInput.textContent = numberOfQues;\r\n  showResultMessage(score, numberOfQues);\r\n};\r\ngameSettingsBtn.addEventListener(\"click\", () => {\r\n  quizContainer.classList.remove(\"show-results\");\r\n  quizContainer.classList.add(\"show-game-settings\");\r\n});\r\ntryAgainBtn.addEventListener(\"click\", () => {\r\n  (0,_quiz_game_js__WEBPACK_IMPORTED_MODULE_0__.resetCurrTriviaInx)();\r\n  quizContainer.classList.remove(\"show-results\");\r\n  quizContainer.classList.add(\"show-quiz-content\");\r\n  (0,_quiz_game_js__WEBPACK_IMPORTED_MODULE_0__.startQuiz)();\r\n});\r\n\r\n\r\n\n\n//# sourceURL=webpack://trivia-quiz/./src/scripts/game-results.js?");

/***/ }),

/***/ "./src/scripts/game-settings.js":
/*!**************************************!*\
  !*** ./src/scripts/game-settings.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addDiffCategoryEvent: () => (/* binding */ addDiffCategoryEvent),\n/* harmony export */   addDifficultyBtnsEvtListener: () => (/* binding */ addDifficultyBtnsEvtListener),\n/* harmony export */   addNumQuestionsEvtListener: () => (/* binding */ addNumQuestionsEvtListener),\n/* harmony export */   checkInputtedNumQues: () => (/* binding */ checkInputtedNumQues),\n/* harmony export */   disableDecreaseBtn: () => (/* binding */ disableDecreaseBtn),\n/* harmony export */   form: () => (/* binding */ form),\n/* harmony export */   handleFormSubmit: () => (/* binding */ handleFormSubmit),\n/* harmony export */   numQuestionsInput: () => (/* binding */ numQuestionsInput)\n/* harmony export */ });\n/* harmony import */ var _quiz_game_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./quiz-game.js */ \"./src/scripts/quiz-game.js\");\n\r\nconst form = document.querySelector(\".form\");\r\nconst labels = document.querySelectorAll(\".difficulty-label\");\r\nconst numQuestionsInput = document.querySelector(\".num-questions-input\");\r\nlet MAX = 50;\r\nconst MIN = 5;\r\nlet isNumQuesValid = true;\r\n// Send data to server\r\nconst sendDataToServer = async (data) => {\r\n  let result;\r\n  try {\r\n    const response = await fetch(\"/questions\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    result = await response.json();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n  return result;\r\n};\r\n// Hide game settings\r\nconst hideGameSettings = (parentContainer) => {\r\n  parentContainer.classList.remove(\"show-game-settings\");\r\n};\r\n// Show quiz content\r\nconst showQuizContent = (parentContainer) => {\r\n  parentContainer.classList.toggle(\"show-quiz-content\");\r\n};\r\n// Resets Input Values and Styling to default\r\nconst resetInputs = () => {\r\n  const diffLabels = document.querySelectorAll(\".difficulty-label\");\r\n  const numQuesInput = document.querySelector(\".num-questions-input\");\r\n  const selectInput = document.querySelector(\".category-select\");\r\n  const diffLabel = [...diffLabels].find((label) =>\r\n    label.classList.contains(\"selected\")\r\n  );\r\n  if (diffLabel) {\r\n    diffLabel.classList.remove(\"selected\");\r\n    const radio = diffLabel.querySelector(\"input\");\r\n\r\n    radio.checked = false;\r\n  }\r\n\r\n  numQuesInput.value = 5;\r\n\r\n  selectInput.value = 9;\r\n};\r\n// Hide input validation messages\r\nconst hideInputValMess = () => {\r\n  const diffParent = document.querySelector(\".difficulty-upper-container\");\r\n  diffParent.classList.remove(\"show-diff-error\");\r\n};\r\n// Check if a difficulty is selected\r\nconst checkSelectedDifficulty = () => {\r\n  const labels = document.querySelectorAll(\".difficulty-label\");\r\n  const label = [...labels].find(\r\n    (label) => label.classList.contains(\"selected\") && label.children[0].checked\r\n  );\r\n  const parent = document.querySelector(\".difficulty-upper-container\");\r\n\r\n  if (!label) {\r\n    parent.classList.add(\"show-diff-error\");\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n// Handle a form submit\r\nconst handleFormSubmit = async (e) => {\r\n  e.preventDefault();\r\n  const isdiffInputVaid = checkSelectedDifficulty();\r\n\r\n  if (isdiffInputVaid && isNumQuesValid) {\r\n    const formData = new FormData(form);\r\n\r\n    const data = Object.fromEntries(formData.entries());\r\n\r\n    const trivias = await sendDataToServer(data);\r\n    resetInputs();\r\n    hideInputValMess();\r\n\r\n    (0,_quiz_game_js__WEBPACK_IMPORTED_MODULE_0__.resetGameVariables)();\r\n    (0,_quiz_game_js__WEBPACK_IMPORTED_MODULE_0__.setTriviasData)(trivias);\r\n    (0,_quiz_game_js__WEBPACK_IMPORTED_MODULE_0__.startQuiz)();\r\n\r\n    const parentContainer = document.querySelector(\".quiz-container\");\r\n    hideGameSettings(parentContainer);\r\n    showQuizContent(parentContainer);\r\n  }\r\n};\r\n\r\n// Add event listener for the difficulty radio buttons\r\nconst addDifficultyBtnsEvtListener = () => {\r\n  labels.forEach((label) => {\r\n    const radio = label.querySelector(\"input\");\r\n\r\n    radio.addEventListener(\"change\", () => {\r\n      // Remove \"selected\" class from all labels\r\n      labels.forEach((l) => l.classList.remove(\"selected\"));\r\n\r\n      // Add to the selected one\r\n      if (radio.checked) {\r\n        label.classList.add(\"selected\");\r\n      }\r\n    });\r\n  });\r\n};\r\n// Disable decrease num of questions button\r\nconst disableDecreaseBtn = () => {\r\n  const decBtn = document.querySelector(\"#decrease-btn\");\r\n  decBtn.setAttribute(\"disabled\", \"\");\r\n};\r\n// Disable increase num of questions button\r\nconst disableIncreaseBtn = () => {\r\n  const incBtn = document.querySelector(\"#increase-btn\");\r\n  incBtn.setAttribute(\"disabled\", \"\");\r\n};\r\n// Reenable diabled increase num of questions button\r\nconst reenableIncreaseBtn = () => {\r\n  const incBtn = document.querySelector(\"#increase-btn\");\r\n  incBtn.removeAttribute(\"disabled\");\r\n};\r\n// Reenable  diabled decrease num of questions button\r\nconst reenableDecreaseBtn = () => {\r\n  const incBtn = document.querySelector(\"#decrease-btn\");\r\n  incBtn.removeAttribute(\"disabled\");\r\n};\r\n// Check the number of questions with a min of 5 and max of 50.\r\nconst checkInputtedNumQues = (e) => {\r\n  const inputVal = parseInt(e.target.value);\r\n\r\n  const parent = document.querySelector(\".num-ques-upper\");\r\n\r\n  reenableDecreaseBtn();\r\n  reenableIncreaseBtn();\r\n\r\n  if (inputVal >= MIN && inputVal <= MAX) {\r\n    parent.classList.remove(\"show-num-ques-error\");\r\n    if (inputVal === MIN) {\r\n      disableDecreaseBtn();\r\n    } else if (inputVal === MAX) {\r\n      disableIncreaseBtn();\r\n    } else {\r\n      reenableDecreaseBtn();\r\n      reenableIncreaseBtn();\r\n    }\r\n\r\n    isNumQuesValid = true;\r\n  } else {\r\n    parent.classList.add(\"show-num-ques-error\");\r\n\r\n    if (inputVal > MAX) {\r\n      disableIncreaseBtn();\r\n    } else {\r\n      disableDecreaseBtn();\r\n    }\r\n\r\n    isNumQuesValid = false;\r\n  }\r\n};\r\n// Add event listener to increase and decrease btn\r\nconst addNumQuestionsEvtListener = () => {\r\n  const numQuestionsBtns = document.querySelectorAll(\".num-questions-btn\");\r\n  const numQuestionsInput = document.querySelector(\"#num-questions-input\");\r\n  const parent = document.querySelector(\".num-ques-upper\");\r\n\r\n  numQuestionsBtns.forEach((btn) => {\r\n    btn.addEventListener(\"click\", () => {\r\n      parent.classList.remove(\"show-num-ques-error\");\r\n\r\n      let currentValue = Number(numQuestionsInput.value);\r\n\r\n      if (btn.id === \"decrease-btn\" && currentValue > MIN) {\r\n        currentValue -= 1;\r\n      } else if (btn.id === \"increase-btn\" && currentValue < MAX) {\r\n        currentValue += 1;\r\n      }\r\n      numQuestionsInput.value = currentValue;\r\n      if (currentValue <= MIN) {\r\n        disableDecreaseBtn();\r\n        if (currentValue < MIN) {\r\n          parent.classList.add(\"show-num-ques-error\");\r\n          isNumQuesValid = false;\r\n        }\r\n      } else {\r\n        reenableDecreaseBtn();\r\n        isNumQuesValid = true;\r\n      }\r\n\r\n      if (currentValue >= MAX) {\r\n        disableIncreaseBtn();\r\n        if (currentValue > MAX) {\r\n          parent.classList.add(\"show-num-ques-error\");\r\n          isNumQuesValid = false;\r\n        }\r\n      } else {\r\n        reenableIncreaseBtn();\r\n        isNumQuesValid = true;\r\n      }\r\n    });\r\n  });\r\n};\r\n// Get total questions for a difficulty (easy, medium, hard)\r\nconst getTotalQuestions = async (category) => {\r\n  const response = await fetch(\"/numberQuestions/\" + category, {\r\n    method: \"GET\",\r\n  });\r\n  return response.json();\r\n};\r\n// Change max number of questions depending on difficulty and category\r\nconst changeMaxNumQuestions = async (selectedDiff) => {\r\n  const select = document.querySelector(\".category-select\");\r\n  const categorySelected = select.options[select.selectedIndex].value;\r\n  const totalQuestionsObj = await getTotalQuestions(categorySelected);\r\n\r\n  const quesKeys = Object.keys(totalQuestionsObj);\r\n  const quesKey = quesKeys.find((key) => key.split(\"_\")[1] === selectedDiff);\r\n\r\n  const numQuestions = totalQuestionsObj[quesKey];\r\n  if (numQuestions >= 50) {\r\n    MAX = 50;\r\n  } else if (numQuestions < 50) {\r\n    MAX = numQuestions;\r\n  }\r\n  const maxNumQuesEl = document.querySelector(\"#num-ques-max\");\r\n  maxNumQuesEl.textContent = MAX;\r\n};\r\n// Add form change event listener for difficulty and category.\r\nconst addDiffCategoryEvent = () => {\r\n  form.addEventListener(\"change\", (e) => {\r\n    if (e.target.classList.contains(\"difficulty-input\")) {\r\n      const selectedDiff = e.target.value;\r\n      changeMaxNumQuestions(selectedDiff);\r\n    } else if (e.target.classList.contains(\"category-select\")) {\r\n      const label = [...labels].find((label) =>\r\n        label.classList.contains(\"selected\")\r\n      );\r\n      if (label) {\r\n        const selectedDiff = label.querySelector(\"input\").value;\r\n        changeMaxNumQuestions(selectedDiff);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n\r\n\n\n//# sourceURL=webpack://trivia-quiz/./src/scripts/game-settings.js?");

/***/ }),

/***/ "./src/scripts/game-sounds.js":
/*!************************************!*\
  !*** ./src/scripts/game-sounds.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst clickSound = new Audio(\"../sounds/clickSound.mp3\");\r\nconst correctClickSound = new Audio(\"../sounds/correctAnswer.mp3\");\r\nconst wrongClickSound = new Audio(\"../sounds/wrongSound.mp3\");\r\n\r\n// Event listeners for buttons\r\nconst addButtonsEvtListener = () => {\r\n  const buttons = document.querySelectorAll(\"button\");\r\n  buttons.forEach((button) => {\r\n    button.addEventListener(\"click\", playClickSound);\r\n  });\r\n};\r\n// Play the click sound of buttons\r\nconst playClickSound = (e) => {\r\n  const isMainButton = e.target.classList.contains(\"main-button\");\r\n  const isIncDecBtn = e.target.classList.contains(\"num-questions-btn\");\r\n  const isReadMoreExit = e.target.classList.contains(\"question-modal-exit\");\r\n\r\n  const isCorrect = e.target.dataset.correct;\r\n\r\n  if (!isMainButton && !isIncDecBtn && !isReadMoreExit) {\r\n    correctClickSound.pause();\r\n    correctClickSound.currentTime = 0;\r\n    wrongClickSound.pause();\r\n    wrongClickSound.currentTime = 0;\r\n    clickSound.play();\r\n  } else if (isMainButton && isCorrect) {\r\n    correctClickSound.play();\r\n  } else if (isMainButton && !isCorrect) {\r\n    wrongClickSound.play();\r\n  }\r\n};\r\n\r\naddButtonsEvtListener();\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (wrongClickSound);\r\n\n\n//# sourceURL=webpack://trivia-quiz/./src/scripts/game-sounds.js?");

/***/ }),

/***/ "./src/scripts/quiz-game.js":
/*!**********************************!*\
  !*** ./src/scripts/quiz-game.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resetCurrTriviaInx: () => (/* binding */ resetCurrTriviaInx),\n/* harmony export */   resetGameVariables: () => (/* binding */ resetGameVariables),\n/* harmony export */   setTriviasData: () => (/* binding */ setTriviasData),\n/* harmony export */   startQuiz: () => (/* binding */ startQuiz)\n/* harmony export */ });\n/* harmony import */ var _game_results_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game-results.js */ \"./src/scripts/game-results.js\");\n/* harmony import */ var _game_sounds_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game-sounds.js */ \"./src/scripts/game-sounds.js\");\n\r\n\r\nconst nextBtn = document.querySelector(\".aside-next\");\r\nconst answerBtns = document.querySelectorAll(\".main-button\");\r\n// const seeMoreBtn = document.querySelector(\".see-more\");\r\nconst exitModalBtn = document.querySelector(\".question-modal-exit\");\r\nlet triviasData;\r\nlet currentTriviaInx = 0;\r\nlet currentQuizTimer;\r\nlet currentCorrAnsCount = 0;\r\n// Set triviasdata variable\r\nconst setTriviasData = (data) => {\r\n  triviasData = data;\r\n};\r\nconst markCorrectButton = (index) => {\r\n  const btns = document.querySelectorAll(\".main-button\");\r\n  if (btns[index]) {\r\n    btns[index].dataset.correct = \"true\";\r\n  }\r\n};\r\n// Create new Answers\r\nconst createNewAnswers = (currTrivia) => {\r\n  const correctPlacement = Math.floor(Math.random() * 4);\r\n  markCorrectButton(correctPlacement);\r\n\r\n  const correctAnswer = currTrivia.correct_answer;\r\n\r\n  const newAnswers = [...currTrivia.incorrect_answers];\r\n\r\n  newAnswers.splice(correctPlacement, 0, correctAnswer);\r\n\r\n  return newAnswers;\r\n};\r\n// Change the value of multiple choice answers\r\nconst changeAnswersValue = (newAnswers) => {\r\n  const buttons = document.querySelectorAll(\".main-button\");\r\n  buttons.forEach((btn, index) => {\r\n    btn.innerHTML = newAnswers[index];\r\n  });\r\n};\r\n// Decodes html entities from the trivia questions\r\nconst decodeHtmlEntities = (html) => {\r\n  const txt = document.createElement(\"textarea\");\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n};\r\n// Change the text content of question\r\nconst changeQuestionValue = (question) => {\r\n  const questionInput = document.querySelector(\".main-question\");\r\n  const decodedQuestion = decodeHtmlEntities(question);\r\n\r\n  const questionCharCount = decodedQuestion.length;\r\n\r\n  // questionInput.innerHTML = question;\r\n  const completeQuesEl = document.querySelector(\".complete-question\");\r\n  const seeMoreEl = document.createElement(\"span\");\r\n  if (window.screen.width < 736) {\r\n    if (questionCharCount > 85) {\r\n      let newQuesDisplay = decodedQuestion.substring(0, 80);\r\n      newQuesDisplay = newQuesDisplay + \"... \";\r\n      questionInput.innerHTML = newQuesDisplay;\r\n      seeMoreEl.textContent = \"Read More\";\r\n      seeMoreEl.classList.add(\"read-more\");\r\n      questionInput.appendChild(seeMoreEl);\r\n      completeQuesEl.innerHTML = decodedQuestion;\r\n\r\n      seeMoreEl.addEventListener(\"click\", showQuestionModal);\r\n    } else {\r\n      questionInput.innerHTML = decodedQuestion;\r\n    }\r\n  } else {\r\n    questionInput.innerHTML = decodedQuestion;\r\n  }\r\n};\r\n// Change current question number\r\nconst changeCurrQuestionNum = (currentQuesNum) => {\r\n  const currentQuesNumInp = document.querySelector(\".aside-curr-question\");\r\n  currentQuesNumInp.textContent = currentQuesNum;\r\n};\r\n// Change num of questions text content\r\nconst changeNumQuestionsValue = (numOfQuestions) => {\r\n  const numQuestionsInputs = document.querySelectorAll(\".num-question\");\r\n  numQuestionsInputs.forEach((numQuestionsInput) => {\r\n    numQuestionsInput.textContent = numOfQuestions;\r\n  });\r\n};\r\n// Change category text content\r\nconst changeCategoryValue = (category) => {\r\n  const categoryInput = document.querySelector(\".header-category\");\r\n  categoryInput.innerHTML = category;\r\n};\r\n// Removes previous correct data attribute.\r\nconst removeCorrectDataAttr = () => {\r\n  const correctAns = [...answerBtns].find(\r\n    (answerBtn) => answerBtn.dataset.correct === \"true\"\r\n  );\r\n  correctAns ? correctAns.removeAttribute(\"data-correct\") : null;\r\n};\r\n// Load questions and other significant quiz info\r\nconst loadQuestions = () => {\r\n  removeCorrectDataAttr();\r\n  removeCorrectAndWrong();\r\n  reenableAllAnswerBtns();\r\n  nextBtn.setAttribute(\"disabled\", \"\");\r\n  const currentTrivia = triviasData[currentTriviaInx];\r\n  const newAnswers = createNewAnswers(currentTrivia);\r\n  changeAnswersValue(newAnswers);\r\n  const question = currentTrivia.question;\r\n  changeQuestionValue(question);\r\n  currentTriviaInx++;\r\n  changeCurrQuestionNum(currentTriviaInx);\r\n};\r\n// Change current time\r\nconst changeCurrTime = (currTime) => {\r\n  const currTimeInput = document.querySelector(\".current-time\");\r\n  currTimeInput.textContent = currTime;\r\n};\r\n// Reveals the correct answer and all wrong ansers\r\nconst revealAllAnswers = () => {\r\n  answerBtns.forEach((answerBtn) => {\r\n    answerBtn.dataset.correct\r\n      ? answerBtn.classList.add(\"correct\")\r\n      : answerBtn.classList.add(\"wrong\");\r\n  });\r\n};\r\n// start Timer\r\nconst startTimer = () => {\r\n  let currentTime = 10;\r\n  changeCurrTime(currentTime);\r\n  const quizTimer = setInterval(() => {\r\n    currentTime--;\r\n    changeCurrTime(currentTime);\r\n\r\n    if (currentTime <= 0) {\r\n      clearInterval(quizTimer);\r\n      // currentTriviaInx++;\r\n      nextBtn.removeAttribute(\"disabled\");\r\n      revealAllAnswers();\r\n      disableAllAnswerBtns();\r\n      _game_sounds_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].play();\r\n    }\r\n  }, 1000);\r\n  return quizTimer;\r\n};\r\n// remove correct and wrong styling\r\nconst removeCorrectAndWrong = () => {\r\n  answerBtns.forEach((answerBtn) => {\r\n    answerBtn.classList.remove(\"correct\", \"wrong\");\r\n  });\r\n};\r\n// Check for the correct answer button\r\nconst checkCorrectAnswer = (e) => {\r\n  const btnClicked = e.target;\r\n\r\n  if (btnClicked.dataset.correct) {\r\n    btnClicked.classList.add(\"correct\");\r\n    currentCorrAnsCount++;\r\n    changeCorrectAnswerCount();\r\n  } else {\r\n    btnClicked.classList.add(\"wrong\");\r\n    const correctBtn = [...answerBtns].find(\r\n      (answerBtn) => answerBtn.dataset.correct === \"true\"\r\n    );\r\n    correctBtn.classList.add(\"correct\");\r\n  }\r\n};\r\n// Reenable all answer btns\r\nconst reenableAllAnswerBtns = () => {\r\n  answerBtns.forEach((answerBtn) => {\r\n    answerBtn.removeAttribute(\"disabled\");\r\n  });\r\n};\r\n// Disable all answer btns\r\nconst disableAllAnswerBtns = () => {\r\n  answerBtns.forEach((answerBtn) => {\r\n    answerBtn.setAttribute(\"disabled\", \"\");\r\n  });\r\n};\r\n// Set event listener for answer buttons\r\nconst answerBtnsAddEventListener = () => {\r\n  answerBtns.forEach((btn) => {\r\n    btn.addEventListener(\"click\", (e) => {\r\n      checkCorrectAnswer(e);\r\n      clearInterval(currentQuizTimer);\r\n      nextBtn.removeAttribute(\"disabled\");\r\n      disableAllAnswerBtns();\r\n    });\r\n  });\r\n};\r\n// Change correct answer count\r\nconst changeCorrectAnswerCount = () => {\r\n  const corrAnswerCountInput = document.querySelector(\".correct-answer-count\");\r\n  corrAnswerCountInput.textContent = currentCorrAnsCount;\r\n};\r\n// Reset all trivia data\r\nconst resetGameVariables = () => {\r\n  triviasData = undefined;\r\n  currentTriviaInx = 0;\r\n};\r\n// Reset Current Trivia Index\r\nconst resetCurrTriviaInx = () => {\r\n  currentTriviaInx = 0;\r\n};\r\n// Show the modal that contains the whole trivia question.\r\nconst showQuestionModal = () => {\r\n  const body = document.querySelector(\"body\");\r\n  body.classList.add(\"show-modal\");\r\n};\r\n// Remove modal that contains the whole trivia question.\r\nconst removeQuestionModal = () => {\r\n  const body = document.querySelector(\"body\");\r\n  body.classList.remove(\"show-modal\");\r\n};\r\n// Start the quiz\r\nconst startQuiz = () => {\r\n  // let isGameDone = false;\r\n  currentCorrAnsCount = 0;\r\n  const category = triviasData[0].category;\r\n  changeCategoryValue(category);\r\n\r\n  const numOfQuestions = triviasData.length;\r\n  changeNumQuestionsValue(numOfQuestions);\r\n\r\n  changeCorrectAnswerCount();\r\n\r\n  loadQuestions();\r\n\r\n  currentQuizTimer = startTimer();\r\n};\r\nanswerBtnsAddEventListener();\r\nnextBtn.addEventListener(\"click\", () => {\r\n  if (currentTriviaInx + 1 === triviasData.length) {\r\n    nextBtn.textContent = \"See Results\";\r\n  }\r\n  if (currentTriviaInx + 1 <= triviasData.length) {\r\n    loadQuestions();\r\n    currentQuizTimer = startTimer();\r\n  } else {\r\n    (0,_game_results_js__WEBPACK_IMPORTED_MODULE_0__.showGameResults)(currentCorrAnsCount, currentTriviaInx);\r\n    nextBtn.textContent = \"Next\";\r\n  }\r\n});\r\nexitModalBtn.addEventListener(\"click\", removeQuestionModal);\r\n\r\n\r\n\n\n//# sourceURL=webpack://trivia-quiz/./src/scripts/quiz-game.js?");

/***/ }),

/***/ "./src/scripts/starting-screen.js":
/*!****************************************!*\
  !*** ./src/scripts/starting-screen.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startBtn: () => (/* binding */ startBtn),\n/* harmony export */   startGame: () => (/* binding */ startGame)\n/* harmony export */ });\nconst startBtn = document.querySelector(\".starting-screen-btn\");\r\n// Hide starting screen\r\nconst hideStartingScreen = (parentContainer) => {\r\n  parentContainer.classList.toggle(\"hide-start-screen\");\r\n};\r\n// Show game settings\r\nconst showGameSettings = (parentContainer) => {\r\n  parentContainer.classList.toggle(\"show-game-settings\");\r\n};\r\n\r\n// Starts game\r\nconst startGame = () => {\r\n  const parentContainer = document.querySelector(\".quiz-container\");\r\n  hideStartingScreen(parentContainer);\r\n  showGameSettings(parentContainer);\r\n};\r\n\r\n\r\n\n\n//# sourceURL=webpack://trivia-quiz/./src/scripts/starting-screen.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;